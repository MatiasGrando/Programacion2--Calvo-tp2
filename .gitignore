#ifndef CUATROENLINEAENERGIZADO_H
#define CUATROENLINEAENERGIZADO_H
#include "Lista.h"
#include "IndiceColumna.h"
#include <iostream>
using namespace std;
class CuatroEnLineaEnergizado
{
    private:
        unsigned int cantidadDeFichasEnELTablero;
        unsigned int cantidadDeJugadores;
        IndiceColumna* tableroColumnas;
        unsigned int cantidadColumnas;
        unsigned int cantidadFilas;
        void inicializarCursorDeColumnaActualEImprimirFicha();
        void retrocederCursorDeColumnaActualEImprimirFicha();
         //imprime la primera fila e inicializa los cursores de las listas de columnas en la ultima posicion
        void imprimirPrimeraFila();
        //imprime las filas y va retrocediendo el  cursor de la lista columnas hasta llegar e imprimir el primero
        void imprimirRestoDeFilas();
        void crearTablero();
        void imprimirTablero();

        void insertarFicha(int jugador);
        bool columnaLlena(int columna);

        bool comprobarSiGano(int jugador);
        bool ganoPorColumna(int jugador);
        bool ganoPorFila(int jugador);
        bool ganoPorEscaleraAscendente(int jugador);
        bool ganoPorEscaleraDescendente(int jugador);

        bool cuatroEnColumna(Columna* columnaActual,int fila);
        bool cuatroEnFila(int columna, int fila);
        bool cuatroEnEscaleraAscendente(int columna,int fila);
        bool cuatroEnEscaleraDescendente(int columna,int fila);

        Columna* posicionarseEnColumna(int columna);
        Ficha* posicionarseEnFila(Columna* columnaActual,int fila);
        Ficha* posicionarseEnFilaLibre(Columna* columnaActual);

        void mensajeDeFinalizacionDelJuego(int jugador, bool hayGanador);

    public:

        CuatroEnLineaEnergizado(unsigned int filas,unsigned int columnas,unsigned int jugadores);
        ~CuatroEnLineaEnergizado();
        void iniciarPartida();

};
Ficha* CuatroEnLineaEnergizado::posicionarseEnFila(Columna* columnaActual, int fila)
{
    columnaActual->obtenerColumna()->iniciarCursor();
    for(int i =1; i< fila;i++)
    {
        columnaActual->obtenerColumna()->avanzarCursor();
    }
    Ficha* filaActual=columnaActual->obtenerColumna()->obtenerCursor()->obtenerDato();
    return filaActual;
}
bool CuatroEnLineaEnergizado::cuatroEnColumna(Columna* columnaActual,int fila)
{
    Ficha* ficha1;Ficha* ficha2;Ficha* ficha3;Ficha* ficha4;
    ficha1=posicionarseEnFila(columnaActual,fila);
    ficha2=posicionarseEnFila(columnaActual,fila+1);
    ficha3=posicionarseEnFila(columnaActual,fila+2);
    ficha4=posicionarseEnFila(columnaActual,fila+3);

    return (  ( ficha1->obtenerJugador()!=0)
            && (ficha1->obtenerJugador()==ficha2->obtenerJugador())
            && (ficha1->obtenerJugador()==ficha3->obtenerJugador())
            && (ficha1->obtenerJugador()==ficha4->obtenerJugador()));
}
bool CuatroEnLineaEnergizado::cuatroEnFila(int columna, int fila)
{
    Ficha* ficha1;Ficha* ficha2;Ficha* ficha3;Ficha* ficha4;
    Columna* columna1;Columna* columna2;Columna* columna3;Columna* columna4;
    columna1=posicionarseEnColumna(columna);
    columna2=posicionarseEnColumna(columna+1);
    columna3=posicionarseEnColumna(columna+2);
    columna4=posicionarseEnColumna(columna+3);
    ficha1=posicionarseEnFila(columna1,fila);
    ficha2=posicionarseEnFila(columna2,fila);
    ficha3=posicionarseEnFila(columna3,fila);
    ficha4=posicionarseEnFila(columna4,fila);
    return (   (ficha1->obtenerJugador()!=0)
            && (ficha1->obtenerJugador()==ficha2->obtenerJugador())
            && (ficha1->obtenerJugador()==ficha3->obtenerJugador())
            && (ficha1->obtenerJugador()==ficha4->obtenerJugador()));
}
bool CuatroEnLineaEnergizado::cuatroEnEscaleraAscendente(int columna, int fila)
{
    Ficha* ficha1;Ficha* ficha2;Ficha* ficha3;Ficha* ficha4;
    Columna* columna1;Columna* columna2;Columna* columna3;Columna* columna4;
    columna1=posicionarseEnColumna(columna);
    columna2=posicionarseEnColumna(columna+1);
    columna3=posicionarseEnColumna(columna+2);
    columna4=posicionarseEnColumna(columna+3);
    ficha1=posicionarseEnFila(columna1,fila);
    ficha2=posicionarseEnFila(columna2,fila+1);
    ficha3=posicionarseEnFila(columna3,fila+2);
    ficha4=posicionarseEnFila(columna4,fila+3);
    return (   ficha1->obtenerJugador()!=0
            && ficha1->obtenerJugador()==ficha2->obtenerJugador()
            && ficha1->obtenerJugador()==ficha3->obtenerJugador()
            && ficha1->obtenerJugador()==ficha4->obtenerJugador());
}
bool CuatroEnLineaEnergizado::cuatroEnEscaleraDescendente(int columna, int fila)
{
    Ficha* ficha1;Ficha* ficha2;Ficha* ficha3;Ficha* ficha4;
    Columna* columna1;Columna* columna2;Columna* columna3;Columna* columna4;
    columna1=posicionarseEnColumna(columna);
    columna2=posicionarseEnColumna(columna+1);
    columna3=posicionarseEnColumna(columna+2);
    columna4=posicionarseEnColumna(columna+3);
    ficha1=posicionarseEnFila(columna1,fila+3);
    ficha2=posicionarseEnFila(columna2,fila+2);
    ficha3=posicionarseEnFila(columna3,fila+1);
    ficha4=posicionarseEnFila(columna4,fila);
    return (   ficha1->obtenerJugador()!=0
            && ficha1->obtenerJugador()==ficha2->obtenerJugador()
            && ficha1->obtenerJugador()==ficha3->obtenerJugador()
            && ficha1->obtenerJugador()==ficha4->obtenerJugador());
}
bool CuatroEnLineaEnergizado::ganoPorEscaleraDescendente(int jugador)
{
    bool gano=false;
    int fila=1;
    while ((gano==false)&&((cantidadFilas-3)>=fila))
    {
        int columna=1;
        while ((columna<=(cantidadColumnas-3))&&(cuatroEnEscaleraDescendente(columna,fila)==false))
        {
            columna++;
        }
        if((columna<=(cantidadColumnas-3))&&(cuatroEnEscaleraDescendente(columna,fila)==true))
        {
            gano=true;
        }
        else
        {
            fila++;
        }
    }
    return(gano);
}

bool CuatroEnLineaEnergizado::ganoPorEscaleraAscendente(int jugador)
{
    bool gano=false;
    int fila=1;
    while ((gano==false)&&((cantidadFilas-3)>=fila))
    {
        int columna=1;
        while ((columna<=(cantidadColumnas-3))&&(cuatroEnEscaleraAscendente(columna,fila)==false))
        {
            columna++;
        }
        if((columna<=(cantidadColumnas-3))&&(cuatroEnEscaleraAscendente(columna,fila)==true))
        {
            gano=true;
        }
        else
        {
            fila++;
        }
    }
    return (gano);
}
bool CuatroEnLineaEnergizado::ganoPorColumna(int jugador)
{
    bool gano=false;
    int columna=1;
    while((gano==false) && ((cantidadColumnas)>=columna))
    {
        Columna* columnaActual=posicionarseEnColumna(columna);
        int fila=1;
        while ((fila<=(cantidadFilas-3))&&(cuatroEnColumna(columnaActual,fila)==false))
        {
            fila++;
        }
        if((fila<=(cantidadFilas-3))&&(cuatroEnColumna(columnaActual,fila)==true))
        {
            gano=true;
        }
        else
        {
            columna++;
        }
    }
    return gano;
}
bool CuatroEnLineaEnergizado::ganoPorFila(int jugador)
{
 bool gano=false;
 int fila=1;
 while ((gano==false)&&(cantidadFilas>=fila))
 {
    int columna=1;
    while ((columna<=(cantidadColumnas-3))&&(cuatroEnFila(columna,fila)==false))
    {
        columna++;
    }
    if((columna<=(cantidadColumnas-3))&&(cuatroEnFila(columna,fila)==true))
    {
        gano=true;
    }
    else
    {
        fila++;
    }
 }
 return (gano);
}
bool CuatroEnLineaEnergizado::columnaLlena(int columna)
{
    Columna* columnaActual= posicionarseEnColumna(columna);
    columnaActual->obtenerColumna()->iniciarCursorUltimo();
    Ficha* fichaActual= columnaActual->obtenerColumna()->obtenerCursor()->obtenerDato();
    return (fichaActual->obtenerJugador() != 0);
    }
bool CuatroEnLineaEnergizado::comprobarSiGano(int jugador)
{
    bool gano=false;
    gano = ganoPorColumna(jugador);
    if (gano==false)
    {
        gano = ganoPorFila(jugador);
        if(gano==false)
        {
            gano= ganoPorEscaleraAscendente(jugador);
            if(gano==false)
            {
                gano= ganoPorEscaleraDescendente(jugador);
            }
        }

    }
    return gano;
}
Columna* CuatroEnLineaEnergizado::posicionarseEnColumna(int columna)
{
    this->tableroColumnas->obtenerColumnas()->iniciarCursor();
    for(int i =1; i< columna;i++)
    {
        tableroColumnas->obtenerColumnas()->avanzarCursor();
    }
    Columna* columnaActual=this->tableroColumnas->obtenerColumnas()->obtenerCursor()->obtenerDato();
    return columnaActual;
}
Ficha* CuatroEnLineaEnergizado::posicionarseEnFilaLibre(Columna* columnaActual)
{
    columnaActual->obtenerColumna()->iniciarCursor();
    Ficha* fichaActual= columnaActual->obtenerColumna()->obtenerCursor()->obtenerDato();
    if(fichaActual->obtenerJugador()!= 0)
    {
        while (fichaActual->obtenerJugador()!=0)
        {
            columnaActual->obtenerColumna()->avanzarCursor();
            fichaActual= columnaActual->obtenerColumna()->obtenerCursor()->obtenerDato();
        }
        return fichaActual;
    }
    else
    {
        return fichaActual;
    }
}
void CuatroEnLineaEnergizado::insertarFicha(int jugador)
{
    int columna;
    this->cantidadDeFichasEnELTablero++;
    do
    {
        cout<<endl<<"Turno del Jugador "<<jugador<<" -------- "<<"ingrese columna"<<endl;
        cin>>columna;
        if (columnaLlena(columna) == true)
        {
                cout<<endl<<"Columna llena, ingrese otra columna la cual no se encuentre llena"<<endl;
        }
    }while(columnaLlena(columna) == true);
    Columna* columnaActual= posicionarseEnColumna(columna);
    Ficha* fichaActual= posicionarseEnFilaLibre(columnaActual);
    fichaActual->cambiarJugador(jugador);
    fichaActual->fluctuacionDeEnergia(ENERGIAMAXIMA);

}
void CuatroEnLineaEnergizado::mensajeDeFinalizacionDelJuego(int jugador, bool hayGanador)
{
    if(hayGanador==false)
    {
        cout<<endl<<"<<<<<<<<<<<EMPATE<<<<<<<<<<"<<endl<<"----------PARTIDA FINALIZADA----------";
    }
    else
    {
        cout<<endl<<"<<<<<<<<<<GANADOR JUGADOR "<<jugador<<" <<<<<<<<<<"<<endl<<"----------PARTIDA FINALIZADA----------";
    }
}

void CuatroEnLineaEnergizado::iniciarPartida()
{
    crearTablero();
    imprimirTablero();
    bool hayGanador = false;
    int jugador;
    while ((hayGanador == false) &&(cantidadDeFichasEnELTablero<(cantidadColumnas*cantidadFilas)))
    {
        jugador=0;
        while((jugador < this->cantidadDeJugadores)&&(hayGanador == false)
            &&(cantidadDeFichasEnELTablero<(cantidadColumnas*cantidadFilas)))
        {
            jugador++;
            insertarFicha(jugador);
            hayGanador=comprobarSiGano(jugador);
            imprimirTablero();
        }
    }
    mensajeDeFinalizacionDelJuego(jugador,hayGanador);
}
CuatroEnLineaEnergizado::CuatroEnLineaEnergizado(unsigned int filas,unsigned int columnas,unsigned int jugadores)
{
    this->cantidadColumnas=columnas;
    this->cantidadFilas=filas;
    this->cantidadDeJugadores=jugadores;
    this->cantidadDeFichasEnELTablero=0;
    tableroColumnas= new IndiceColumna;

}
void CuatroEnLineaEnergizado::crearTablero()
{
    for (int i=0; i<(this->cantidadColumnas);i++)
    {
        Columna* columnaActual= new Columna;
        tableroColumnas->obtenerColumnas()->agregarElemento(columnaActual);
        for (int j=0; j<(this->cantidadFilas);j++)
        {
            columnaActual->obtenerColumna()->agregarElemento(new Ficha);
        }
    }
}
void CuatroEnLineaEnergizado::inicializarCursorDeColumnaActualEImprimirFicha()
{
    Columna* columnaActual;
    Ficha* fichaActual;
    columnaActual= this->tableroColumnas->obtenerColumnas()->obtenerCursor()->obtenerDato();
    columnaActual->obtenerColumna()->iniciarCursorUltimo();
    fichaActual=columnaActual->obtenerColumna()->obtenerCursor()->obtenerDato();
    cout<<fichaActual->obtenerJugador()<<" "<<fichaActual->obtenerEnergia()<<"     ";
}
void CuatroEnLineaEnergizado::retrocederCursorDeColumnaActualEImprimirFicha()
{
    Columna* columnaActual;
    Ficha* fichaActual;
    columnaActual= this->tableroColumnas->obtenerColumnas()->obtenerCursor()->obtenerDato();
    columnaActual->obtenerColumna()->retrocederCursor();
    fichaActual=columnaActual->obtenerColumna()->obtenerCursor()->obtenerDato();
    cout<<fichaActual->obtenerJugador()<<" "<<fichaActual->obtenerEnergia()<<"     ";

}
void CuatroEnLineaEnergizado::imprimirPrimeraFila()
{
    this->tableroColumnas->obtenerColumnas()->iniciarCursor();
    inicializarCursorDeColumnaActualEImprimirFicha();
    while(this->tableroColumnas->obtenerColumnas()->avanzarCursor())
    {
        inicializarCursorDeColumnaActualEImprimirFicha();
    }
}
void CuatroEnLineaEnergizado::imprimirRestoDeFilas()
{
    for (int i=1; i<(this->cantidadFilas);i++)
    {
        cout<<endl<<endl<<endl;
        this->tableroColumnas->obtenerColumnas()->iniciarCursor();
        retrocederCursorDeColumnaActualEImprimirFicha();
        while(this->tableroColumnas->obtenerColumnas()->avanzarCursor())
        {
            retrocederCursorDeColumnaActualEImprimirFicha();
        }
    }
}
void CuatroEnLineaEnergizado::imprimirTablero()
{
    imprimirPrimeraFila();
    imprimirRestoDeFilas();
}
CuatroEnLineaEnergizado::~CuatroEnLineaEnergizado()
{
    delete tableroColumnas;
}
#endif // CUATROENLINEAENERGIZADO_H
